//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/nFo/data/etml/codespace/csharp/cosmos/src/interpreter/Cosmos.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace interpreter.antlr {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CosmosParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, LABEL_AUTEUR=5, LABEL_DATE=6, CONTENU_DATE=7, 
		ENTREPRISE_ENTETE=8, DESCRIPTION_ENTETE=9, DEBUT=10, BIBLIOTHEQUE=11, 
		FIN=12, DE_LA_TRANSMISSION=13, ALORS=14, OPERATEUR_EGAL=15, OPERATEUR_DIFFERENT=16, 
		OPERATEUR_BOOLEEN=17, LE_TEXTE=18, VALEUR_TEXTE=19, LE_NOMBRE=20, VALEUR_NOMBRE=21, 
		MOT=22, VIRGULE=23, POINT=24, POINT_INTERROGATION=25, SUIVANT=26, DEUX_POINT=27, 
		TAB=28, RETCHAR=29, ESPACE=30, COMMENTAIRE_LIGNE=31, COMMENTAIRE=32, NOOP=33;
	public const int
		RULE_programme = 0, RULE_entete = 1, RULE_auteur = 2, RULE_date = 3, RULE_entreprise = 4, 
		RULE_description = 5, RULE_mainStart = 6, RULE_mainEnd = 7, RULE_instruction = 8, 
		RULE_instruction_simple = 9, RULE_instruction_complexe = 10, RULE_afficher = 11, 
		RULE_selection = 12, RULE_sinon_si = 13, RULE_sinon = 14, RULE_condition = 15, 
		RULE_operateur_comparaison = 16, RULE_expression_valeur = 17, RULE_expression_textuelle = 18, 
		RULE_expression_numeraire = 19;
	public static readonly string[] ruleNames = {
		"programme", "entete", "auteur", "date", "entreprise", "description", 
		"mainStart", "mainEnd", "instruction", "instruction_simple", "instruction_complexe", 
		"afficher", "selection", "sinon_si", "sinon", "condition", "operateur_comparaison", 
		"expression_valeur", "expression_textuelle", "expression_numeraire"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Afficher'", "'Si'", "'sinon si'", "'et sinon'", "'Auteur:'", "'Date:'", 
		null, "'Entreprise:'", "'Description:'", "'Voici les ordres du programme'", 
		"'à classer dans la bibliothèque'", "'Fin'", "'de la transmission'", "'alors'", 
		null, null, null, "'le texte'", null, null, null, null, "','", "'.'", 
		"'?'", "'>>'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "LABEL_AUTEUR", "LABEL_DATE", "CONTENU_DATE", 
		"ENTREPRISE_ENTETE", "DESCRIPTION_ENTETE", "DEBUT", "BIBLIOTHEQUE", "FIN", 
		"DE_LA_TRANSMISSION", "ALORS", "OPERATEUR_EGAL", "OPERATEUR_DIFFERENT", 
		"OPERATEUR_BOOLEEN", "LE_TEXTE", "VALEUR_TEXTE", "LE_NOMBRE", "VALEUR_NOMBRE", 
		"MOT", "VIRGULE", "POINT", "POINT_INTERROGATION", "SUIVANT", "DEUX_POINT", 
		"TAB", "RETCHAR", "ESPACE", "COMMENTAIRE_LIGNE", "COMMENTAIRE", "NOOP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cosmos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CosmosParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgrammeContext : ParserRuleContext {
		public EnteteContext entete() {
			return GetRuleContext<EnteteContext>(0);
		}
		public MainStartContext mainStart() {
			return GetRuleContext<MainStartContext>(0);
		}
		public MainEndContext mainEnd() {
			return GetRuleContext<MainEndContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CosmosParser.Eof, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgrammeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterProgramme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitProgramme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgrammeContext programme() {
		ProgrammeContext _localctx = new ProgrammeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programme);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; entete();
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 41; Match(RETCHAR);
				}
				}
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 46; mainStart();
			State = 48;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 47; Match(RETCHAR);
				}
				}
				State = 50;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 52; instruction();
				}
				}
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 57; mainEnd();
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnteteContext : ParserRuleContext {
		public AuteurContext auteur() {
			return GetRuleContext<AuteurContext>(0);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public EntrepriseContext entreprise() {
			return GetRuleContext<EntrepriseContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public EnteteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnteteContext entete() {
		EnteteContext _localctx = new EnteteContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_entete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; auteur();
			State = 61; Match(RETCHAR);
			State = 62; date();
			State = 63; Match(RETCHAR);
			State = 64; entreprise();
			State = 65; Match(RETCHAR);
			State = 66; description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuteurContext : ParserRuleContext {
		public ITerminalNode LABEL_AUTEUR() { return GetToken(CosmosParser.LABEL_AUTEUR, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public AuteurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auteur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAuteur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAuteur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuteur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuteurContext auteur() {
		AuteurContext _localctx = new AuteurContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_auteur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(LABEL_AUTEUR);
			State = 69; Match(MOT);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MOT) {
				{
				State = 70; Match(MOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode LABEL_DATE() { return GetToken(CosmosParser.LABEL_DATE, 0); }
		public ITerminalNode CONTENU_DATE() { return GetToken(CosmosParser.CONTENU_DATE, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(LABEL_DATE);
			State = 74; Match(CONTENU_DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntrepriseContext : ParserRuleContext {
		public ITerminalNode ENTREPRISE_ENTETE() { return GetToken(CosmosParser.ENTREPRISE_ENTETE, 0); }
		public ITerminalNode MOT() { return GetToken(CosmosParser.MOT, 0); }
		public EntrepriseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entreprise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntreprise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntreprise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntreprise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntrepriseContext entreprise() {
		EntrepriseContext _localctx = new EntrepriseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_entreprise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(ENTREPRISE_ENTETE);
			State = 77; Match(MOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode DESCRIPTION_ENTETE() { return GetToken(CosmosParser.DESCRIPTION_ENTETE, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public ITerminalNode[] VIRGULE() { return GetTokens(CosmosParser.VIRGULE); }
		public ITerminalNode VIRGULE(int i) {
			return GetToken(CosmosParser.VIRGULE, i);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_description);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(DESCRIPTION_ENTETE);
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 80; Match(MOT);
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==MOT );
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VIRGULE) {
				{
				{
				State = 85; Match(VIRGULE);
				State = 86; Match(RETCHAR);
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 87; Match(MOT);
					}
					}
					State = 90;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==MOT );
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainStartContext : ParserRuleContext {
		public IToken nomDuProgramme;
		public IToken bibliotheque;
		public ITerminalNode DEBUT() { return GetToken(CosmosParser.DEBUT, 0); }
		public ITerminalNode DEUX_POINT() { return GetToken(CosmosParser.DEUX_POINT, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public ITerminalNode BIBLIOTHEQUE() { return GetToken(CosmosParser.BIBLIOTHEQUE, 0); }
		public MainStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainStart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterMainStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitMainStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainStartContext mainStart() {
		MainStartContext _localctx = new MainStartContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_mainStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(DEBUT);
			State = 98; _localctx.nomDuProgramme = Match(MOT);
			State = 101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BIBLIOTHEQUE) {
				{
				State = 99; Match(BIBLIOTHEQUE);
				State = 100; _localctx.bibliotheque = Match(MOT);
				}
			}

			State = 103; Match(DEUX_POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainEndContext : ParserRuleContext {
		public ITerminalNode FIN() { return GetToken(CosmosParser.FIN, 0); }
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode DE_LA_TRANSMISSION() { return GetToken(CosmosParser.DE_LA_TRANSMISSION, 0); }
		public MainEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterMainEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitMainEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainEndContext mainEnd() {
		MainEndContext _localctx = new MainEndContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_mainEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(FIN);
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DE_LA_TRANSMISSION) {
				{
				State = 106; Match(DE_LA_TRANSMISSION);
				}
			}

			State = 109; Match(POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public Instruction_simpleContext instruction_simple() {
			return GetRuleContext<Instruction_simpleContext>(0);
		}
		public Instruction_complexeContext instruction_complexe() {
			return GetRuleContext<Instruction_complexeContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 111; instruction_simple();
				}
				break;

			case 2:
				{
				State = 112; instruction_complexe();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_simpleContext : ParserRuleContext {
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public AfficherContext afficher() {
			return GetRuleContext<AfficherContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_simple; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_simple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_simple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_simpleContext instruction_simple() {
		Instruction_simpleContext _localctx = new Instruction_simpleContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_instruction_simple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 115; Match(TAB);
				}
				}
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 120; afficher();
			}
			State = 121; Match(POINT);
			State = 122; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_complexeContext : ParserRuleContext {
		public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_complexeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_complexe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_complexe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_complexe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_complexe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_complexeContext instruction_complexe() {
		Instruction_complexeContext _localctx = new Instruction_complexeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_instruction_complexe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 124; Match(TAB);
				}
				}
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 129; selection();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AfficherContext : ParserRuleContext {
		public Expression_valeurContext expression_valeur() {
			return GetRuleContext<Expression_valeurContext>(0);
		}
		public AfficherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_afficher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAfficher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAfficher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfficher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AfficherContext afficher() {
		AfficherContext _localctx = new AfficherContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_afficher);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(T__0);
			State = 132; expression_valeur();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public ConditionContext si;
		public ITerminalNode ALORS() { return GetToken(CosmosParser.ALORS, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public ITerminalNode POINT_INTERROGATION() { return GetToken(CosmosParser.POINT_INTERROGATION, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Sinon_siContext[] sinon_si() {
			return GetRuleContexts<Sinon_siContext>();
		}
		public Sinon_siContext sinon_si(int i) {
			return GetRuleContext<Sinon_siContext>(i);
		}
		public SinonContext sinon() {
			return GetRuleContext<SinonContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_selection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(T__1);
			State = 135; _localctx.si = condition();
			State = 136; Match(ALORS);
			State = 137; Match(RETCHAR);
			State = 139;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 138; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 141;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 146;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 143; sinon_si();
					}
					} 
				}
				State = 148;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			State = 150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 149; sinon();
				}
				break;
			}
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 152; Match(TAB);
				}
				}
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 157; Match(POINT_INTERROGATION);
			State = 158; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sinon_siContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode ALORS() { return GetToken(CosmosParser.ALORS, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Sinon_siContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinon_si; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSinon_si(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSinon_si(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinon_si(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sinon_siContext sinon_si() {
		Sinon_siContext _localctx = new Sinon_siContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_sinon_si);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 160; Match(TAB);
				}
				}
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 165; Match(T__2);
			State = 166; condition();
			State = 167; Match(ALORS);
			State = 168; Match(RETCHAR);
			State = 170;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 169; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinonContext : ParserRuleContext {
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public SinonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSinon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSinon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinonContext sinon() {
		SinonContext _localctx = new SinonContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_sinon);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 174; Match(TAB);
				}
				}
				State = 177;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 179; Match(T__3);
			State = 180; Match(RETCHAR);
			State = 182;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 181; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 184;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public Expression_valeurContext left;
		public Expression_valeurContext right;
		public Operateur_comparaisonContext operateur_comparaison() {
			return GetRuleContext<Operateur_comparaisonContext>(0);
		}
		public Expression_valeurContext[] expression_valeur() {
			return GetRuleContexts<Expression_valeurContext>();
		}
		public Expression_valeurContext expression_valeur(int i) {
			return GetRuleContext<Expression_valeurContext>(i);
		}
		public ITerminalNode[] OPERATEUR_BOOLEEN() { return GetTokens(CosmosParser.OPERATEUR_BOOLEEN); }
		public ITerminalNode OPERATEUR_BOOLEEN(int i) {
			return GetToken(CosmosParser.OPERATEUR_BOOLEEN, i);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; _localctx.left = expression_valeur();
			State = 187; operateur_comparaison();
			State = 188; _localctx.right = expression_valeur();
			State = 193;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 189; Match(OPERATEUR_BOOLEEN);
					State = 190; condition();
					}
					} 
				}
				State = 195;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operateur_comparaisonContext : ParserRuleContext {
		public ITerminalNode OPERATEUR_EGAL() { return GetToken(CosmosParser.OPERATEUR_EGAL, 0); }
		public ITerminalNode OPERATEUR_DIFFERENT() { return GetToken(CosmosParser.OPERATEUR_DIFFERENT, 0); }
		public Operateur_comparaisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operateur_comparaison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterOperateur_comparaison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitOperateur_comparaison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperateur_comparaison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operateur_comparaisonContext operateur_comparaison() {
		Operateur_comparaisonContext _localctx = new Operateur_comparaisonContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_operateur_comparaison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = _input.La(1);
			if ( !(_la==OPERATEUR_EGAL || _la==OPERATEUR_DIFFERENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_valeurContext : ParserRuleContext {
		public Expression_textuelleContext expression_textuelle() {
			return GetRuleContext<Expression_textuelleContext>(0);
		}
		public Expression_numeraireContext expression_numeraire() {
			return GetRuleContext<Expression_numeraireContext>(0);
		}
		public Expression_valeurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_valeur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_valeur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_valeur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_valeur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_valeurContext expression_valeur() {
		Expression_valeurContext _localctx = new Expression_valeurContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_expression_valeur);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LE_TEXTE:
			case VALEUR_TEXTE:
				{
				State = 198; expression_textuelle();
				}
				break;
			case LE_NOMBRE:
			case VALEUR_NOMBRE:
				{
				State = 199; expression_numeraire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_textuelleContext : ParserRuleContext {
		public ITerminalNode VALEUR_TEXTE() { return GetToken(CosmosParser.VALEUR_TEXTE, 0); }
		public ITerminalNode LE_TEXTE() { return GetToken(CosmosParser.LE_TEXTE, 0); }
		public Expression_textuelleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_textuelle; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_textuelle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_textuelle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_textuelle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_textuelleContext expression_textuelle() {
		Expression_textuelleContext _localctx = new Expression_textuelleContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_expression_textuelle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_TEXTE) {
				{
				State = 202; Match(LE_TEXTE);
				}
			}

			State = 205; Match(VALEUR_TEXTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_numeraireContext : ParserRuleContext {
		public ITerminalNode VALEUR_NOMBRE() { return GetToken(CosmosParser.VALEUR_NOMBRE, 0); }
		public ITerminalNode LE_NOMBRE() { return GetToken(CosmosParser.LE_NOMBRE, 0); }
		public Expression_numeraireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_numeraire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_numeraire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_numeraire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_numeraire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_numeraireContext expression_numeraire() {
		Expression_numeraireContext _localctx = new Expression_numeraireContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_expression_numeraire);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_NOMBRE) {
				{
				State = 207; Match(LE_NOMBRE);
				}
			}

			State = 210; Match(VALEUR_NOMBRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\xD7\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x6\x2-\n\x2\r\x2\xE\x2.\x3\x2\x3\x2\x6\x2\x33\n\x2\r\x2\xE"+
		"\x2\x34\x3\x2\x6\x2\x38\n\x2\r\x2\xE\x2\x39\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x5\x4J\n\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6\aT\n\a\r\a\xE\aU\x3"+
		"\a\x3\a\x3\a\x6\a[\n\a\r\a\xE\a\\\a\a_\n\a\f\a\xE\a\x62\v\a\x3\b\x3\b"+
		"\x3\b\x3\b\x5\bh\n\b\x3\b\x3\b\x3\t\x3\t\x5\tn\n\t\x3\t\x3\t\x3\n\x3\n"+
		"\x5\nt\n\n\x3\v\x6\vw\n\v\r\v\xE\vx\x3\v\x3\v\x3\v\x3\v\x3\f\x6\f\x80"+
		"\n\f\r\f\xE\f\x81\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x6\xE\x8E\n\xE\r\xE\xE\xE\x8F\x3\xE\a\xE\x93\n\xE\f\xE\xE\xE\x96\v"+
		"\xE\x3\xE\x5\xE\x99\n\xE\x3\xE\x6\xE\x9C\n\xE\r\xE\xE\xE\x9D\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x6\xF\xA4\n\xF\r\xF\xE\xF\xA5\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x6\xF\xAD\n\xF\r\xF\xE\xF\xAE\x3\x10\x6\x10\xB2\n\x10\r\x10\xE"+
		"\x10\xB3\x3\x10\x3\x10\x3\x10\x6\x10\xB9\n\x10\r\x10\xE\x10\xBA\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xC2\n\x11\f\x11\xE\x11\xC5\v\x11\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x5\x13\xCB\n\x13\x3\x14\x5\x14\xCE\n\x14\x3"+
		"\x14\x3\x14\x3\x15\x5\x15\xD3\n\x15\x3\x15\x3\x15\x3\x15\x2\x2\x2\x16"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x3\x3\x2\x11\x12\xDA"+
		"\x2*\x3\x2\x2\x2\x4>\x3\x2\x2\x2\x6\x46\x3\x2\x2\x2\bK\x3\x2\x2\x2\nN"+
		"\x3\x2\x2\x2\fQ\x3\x2\x2\x2\xE\x63\x3\x2\x2\x2\x10k\x3\x2\x2\x2\x12s\x3"+
		"\x2\x2\x2\x14v\x3\x2\x2\x2\x16\x7F\x3\x2\x2\x2\x18\x85\x3\x2\x2\x2\x1A"+
		"\x88\x3\x2\x2\x2\x1C\xA3\x3\x2\x2\x2\x1E\xB1\x3\x2\x2\x2 \xBC\x3\x2\x2"+
		"\x2\"\xC6\x3\x2\x2\x2$\xCA\x3\x2\x2\x2&\xCD\x3\x2\x2\x2(\xD2\x3\x2\x2"+
		"\x2*,\x5\x4\x3\x2+-\a\x1F\x2\x2,+\x3\x2\x2\x2-.\x3\x2\x2\x2.,\x3\x2\x2"+
		"\x2./\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x5\xE\b\x2\x31\x33\a\x1F\x2"+
		"\x2\x32\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35"+
		"\x3\x2\x2\x2\x35\x37\x3\x2\x2\x2\x36\x38\x5\x12\n\x2\x37\x36\x3\x2\x2"+
		"\x2\x38\x39\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\x3\x2\x2"+
		"\x2;<\x5\x10\t\x2<=\a\x2\x2\x3=\x3\x3\x2\x2\x2>?\x5\x6\x4\x2?@\a\x1F\x2"+
		"\x2@\x41\x5\b\x5\x2\x41\x42\a\x1F\x2\x2\x42\x43\x5\n\x6\x2\x43\x44\a\x1F"+
		"\x2\x2\x44\x45\x5\f\a\x2\x45\x5\x3\x2\x2\x2\x46G\a\a\x2\x2GI\a\x18\x2"+
		"\x2HJ\a\x18\x2\x2IH\x3\x2\x2\x2IJ\x3\x2\x2\x2J\a\x3\x2\x2\x2KL\a\b\x2"+
		"\x2LM\a\t\x2\x2M\t\x3\x2\x2\x2NO\a\n\x2\x2OP\a\x18\x2\x2P\v\x3\x2\x2\x2"+
		"QS\a\v\x2\x2RT\a\x18\x2\x2SR\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2U"+
		"V\x3\x2\x2\x2V`\x3\x2\x2\x2WX\a\x19\x2\x2XZ\a\x1F\x2\x2Y[\a\x18\x2\x2"+
		"ZY\x3\x2\x2\x2[\\\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2"+
		"\x2^W\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61"+
		"\r\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x64\a\f\x2\x2\x64g\a\x18\x2\x2\x65"+
		"\x66\a\r\x2\x2\x66h\a\x18\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x3\x2"+
		"\x2\x2ij\a\x1D\x2\x2j\xF\x3\x2\x2\x2km\a\xE\x2\x2ln\a\xF\x2\x2ml\x3\x2"+
		"\x2\x2mn\x3\x2\x2\x2no\x3\x2\x2\x2op\a\x1A\x2\x2p\x11\x3\x2\x2\x2qt\x5"+
		"\x14\v\x2rt\x5\x16\f\x2sq\x3\x2\x2\x2sr\x3\x2\x2\x2t\x13\x3\x2\x2\x2u"+
		"w\a\x1E\x2\x2vu\x3\x2\x2\x2wx\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2"+
		"yz\x3\x2\x2\x2z{\x5\x18\r\x2{|\a\x1A\x2\x2|}\a\x1F\x2\x2}\x15\x3\x2\x2"+
		"\x2~\x80\a\x1E\x2\x2\x7F~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x7F\x3\x2"+
		"\x2\x2\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x5\x1A\xE\x2\x84"+
		"\x17\x3\x2\x2\x2\x85\x86\a\x3\x2\x2\x86\x87\x5$\x13\x2\x87\x19\x3\x2\x2"+
		"\x2\x88\x89\a\x4\x2\x2\x89\x8A\x5 \x11\x2\x8A\x8B\a\x10\x2\x2\x8B\x8D"+
		"\a\x1F\x2\x2\x8C\x8E\x5\x12\n\x2\x8D\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2"+
		"\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x94\x3\x2\x2\x2\x91\x93"+
		"\x5\x1C\xF\x2\x92\x91\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3\x2\x2"+
		"\x2\x94\x95\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x97\x99"+
		"\x5\x1E\x10\x2\x98\x97\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2"+
		"\x2\x9A\x9C\a\x1E\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9B"+
		"\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\a\x1B\x2"+
		"\x2\xA0\xA1\a\x1F\x2\x2\xA1\x1B\x3\x2\x2\x2\xA2\xA4\a\x1E\x2\x2\xA3\xA2"+
		"\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2"+
		"\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\a\x5\x2\x2\xA8\xA9\x5 \x11\x2\xA9\xAA"+
		"\a\x10\x2\x2\xAA\xAC\a\x1F\x2\x2\xAB\xAD\x5\x12\n\x2\xAC\xAB\x3\x2\x2"+
		"\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\x1D"+
		"\x3\x2\x2\x2\xB0\xB2\a\x1E\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2"+
		"\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6"+
		"\a\x6\x2\x2\xB6\xB8\a\x1F\x2\x2\xB7\xB9\x5\x12\n\x2\xB8\xB7\x3\x2\x2\x2"+
		"\xB9\xBA\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\x1F\x3"+
		"\x2\x2\x2\xBC\xBD\x5$\x13\x2\xBD\xBE\x5\"\x12\x2\xBE\xC3\x5$\x13\x2\xBF"+
		"\xC0\a\x13\x2\x2\xC0\xC2\x5 \x11\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC5\x3\x2"+
		"\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4!\x3\x2\x2\x2\xC5\xC3"+
		"\x3\x2\x2\x2\xC6\xC7\t\x2\x2\x2\xC7#\x3\x2\x2\x2\xC8\xCB\x5&\x14\x2\xC9"+
		"\xCB\x5(\x15\x2\xCA\xC8\x3\x2\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB%\x3\x2\x2"+
		"\x2\xCC\xCE\a\x14\x2\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF"+
		"\x3\x2\x2\x2\xCF\xD0\a\x15\x2\x2\xD0\'\x3\x2\x2\x2\xD1\xD3\a\x16\x2\x2"+
		"\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\a"+
		"\x17\x2\x2\xD5)\x3\x2\x2\x2\x1A.\x34\x39IU\\`gmsx\x81\x8F\x94\x98\x9D"+
		"\xA5\xAE\xB3\xBA\xC3\xCA\xCD\xD2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace interpreter.antlr

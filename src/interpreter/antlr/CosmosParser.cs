//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/nFo/data/etml/codespace/csharp/cosmos/src/interpreter/Cosmos.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace interpreter.antlr {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CosmosParser : Parser {
	public const int
		LABEL_AUTEUR=1, LABEL_DATE=2, CONTENU_DATE=3, ENTREPRISE_ENTETE=4, DESCRIPTION_ENTETE=5, 
		TITRE=6, CONTEXTE=7, DEBUT=8, FIN=9, FONCTION_AFFICHER=10, DEBUT_CONDITION=11, 
		SUITE_CONDITION=12, ALTERNATIVE_CONDITION=13, OPERATEUR_EGAL=14, OPERATEUR_DIFFERENT=15, 
		LE_TEXTE=16, VALEUR_TEXTE=17, LE_NOMBRE=18, VALEUR_NOMBRE=19, MOT=20, 
		VIRGULE=21, POINT=22, TAB=23, RETCHAR=24, ESPACE=25, COMMENTAIRE_LIGNE=26, 
		COMMENTAIRE=27, NOOP=28;
	public const int
		RULE_programme = 0, RULE_entete = 1, RULE_auteur = 2, RULE_date = 3, RULE_entreprise = 4, 
		RULE_description = 5, RULE_contexte = 6, RULE_instruction_isolee = 7, 
		RULE_instruction_integree = 8, RULE_instruction_simple_base = 9, RULE_instruction_simple_isolee = 10, 
		RULE_instruction_simple_integree = 11, RULE_instruction_complexe_base = 12, 
		RULE_instruction_complexe_isolee = 13, RULE_instruction_complexe_integree = 14, 
		RULE_afficher = 15, RULE_selection = 16, RULE_condition = 17, RULE_operateur_comparaison = 18, 
		RULE_expression_valeur = 19, RULE_expression_textuelle = 20, RULE_expression_numeraire = 21;
	public static readonly string[] ruleNames = {
		"programme", "entete", "auteur", "date", "entreprise", "description", 
		"contexte", "instruction_isolee", "instruction_integree", "instruction_simple_base", 
		"instruction_simple_isolee", "instruction_simple_integree", "instruction_complexe_base", 
		"instruction_complexe_isolee", "instruction_complexe_integree", "afficher", 
		"selection", "condition", "operateur_comparaison", "expression_valeur", 
		"expression_textuelle", "expression_numeraire"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Auteur:'", "'Date:'", null, "'Entreprise:'", "'Description:'", 
		null, null, "'Voici mes ordres:'", "'Fin.'", "'Afficher'", "'Si'", "'alors'", 
		"'sinon'", null, "'est différent de'", "'le texte'", null, null, null, 
		null, "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LABEL_AUTEUR", "LABEL_DATE", "CONTENU_DATE", "ENTREPRISE_ENTETE", 
		"DESCRIPTION_ENTETE", "TITRE", "CONTEXTE", "DEBUT", "FIN", "FONCTION_AFFICHER", 
		"DEBUT_CONDITION", "SUITE_CONDITION", "ALTERNATIVE_CONDITION", "OPERATEUR_EGAL", 
		"OPERATEUR_DIFFERENT", "LE_TEXTE", "VALEUR_TEXTE", "LE_NOMBRE", "VALEUR_NOMBRE", 
		"MOT", "VIRGULE", "POINT", "TAB", "RETCHAR", "ESPACE", "COMMENTAIRE_LIGNE", 
		"COMMENTAIRE", "NOOP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cosmos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CosmosParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgrammeContext : ParserRuleContext {
		public EnteteContext entete() {
			return GetRuleContext<EnteteContext>(0);
		}
		public ITerminalNode DEBUT() { return GetToken(CosmosParser.DEBUT, 0); }
		public ITerminalNode FIN() { return GetToken(CosmosParser.FIN, 0); }
		public ITerminalNode Eof() { return GetToken(CosmosParser.Eof, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public ContexteContext contexte() {
			return GetRuleContext<ContexteContext>(0);
		}
		public Instruction_isoleeContext[] instruction_isolee() {
			return GetRuleContexts<Instruction_isoleeContext>();
		}
		public Instruction_isoleeContext instruction_isolee(int i) {
			return GetRuleContext<Instruction_isoleeContext>(i);
		}
		public ProgrammeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterProgramme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitProgramme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgrammeContext programme() {
		ProgrammeContext _localctx = new ProgrammeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programme);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; entete();
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 45; Match(RETCHAR);
				}
				}
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONTEXTE) {
				{
				State = 50; contexte();
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 51; Match(RETCHAR);
					}
					}
					State = 54;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==RETCHAR );
				}
			}

			State = 58; Match(DEBUT);
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 59; Match(RETCHAR);
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 64; instruction_isolee();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 69; Match(FIN);
			State = 70; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnteteContext : ParserRuleContext {
		public AuteurContext auteur() {
			return GetRuleContext<AuteurContext>(0);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public EntrepriseContext entreprise() {
			return GetRuleContext<EntrepriseContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public EnteteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnteteContext entete() {
		EnteteContext _localctx = new EnteteContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_entete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; auteur();
			State = 73; Match(RETCHAR);
			State = 74; date();
			State = 75; Match(RETCHAR);
			State = 76; entreprise();
			State = 77; Match(RETCHAR);
			State = 78; description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuteurContext : ParserRuleContext {
		public ITerminalNode LABEL_AUTEUR() { return GetToken(CosmosParser.LABEL_AUTEUR, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public AuteurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auteur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAuteur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAuteur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuteur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuteurContext auteur() {
		AuteurContext _localctx = new AuteurContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_auteur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(LABEL_AUTEUR);
			State = 81; Match(MOT);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MOT) {
				{
				State = 82; Match(MOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode LABEL_DATE() { return GetToken(CosmosParser.LABEL_DATE, 0); }
		public ITerminalNode CONTENU_DATE() { return GetToken(CosmosParser.CONTENU_DATE, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(LABEL_DATE);
			State = 86; Match(CONTENU_DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntrepriseContext : ParserRuleContext {
		public ITerminalNode ENTREPRISE_ENTETE() { return GetToken(CosmosParser.ENTREPRISE_ENTETE, 0); }
		public ITerminalNode MOT() { return GetToken(CosmosParser.MOT, 0); }
		public EntrepriseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entreprise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntreprise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntreprise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntreprise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntrepriseContext entreprise() {
		EntrepriseContext _localctx = new EntrepriseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_entreprise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(ENTREPRISE_ENTETE);
			State = 89; Match(MOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode DESCRIPTION_ENTETE() { return GetToken(CosmosParser.DESCRIPTION_ENTETE, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public ITerminalNode[] VIRGULE() { return GetTokens(CosmosParser.VIRGULE); }
		public ITerminalNode VIRGULE(int i) {
			return GetToken(CosmosParser.VIRGULE, i);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_description);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(DESCRIPTION_ENTETE);
			State = 93;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 92; Match(MOT);
				}
				}
				State = 95;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==MOT );
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VIRGULE) {
				{
				{
				State = 97; Match(VIRGULE);
				State = 98; Match(RETCHAR);
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 99; Match(MOT);
					}
					}
					State = 102;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==MOT );
				}
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContexteContext : ParserRuleContext {
		public ITerminalNode CONTEXTE() { return GetToken(CosmosParser.CONTEXTE, 0); }
		public ITerminalNode TITRE() { return GetToken(CosmosParser.TITRE, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public ContexteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contexte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterContexte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitContexte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContexte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContexteContext contexte() {
		ContexteContext _localctx = new ContexteContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_contexte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(CONTEXTE);
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 110; Match(RETCHAR);
				}
				}
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 115; Match(TITRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_isoleeContext : ParserRuleContext {
		public Instruction_simple_isoleeContext instruction_simple_isolee() {
			return GetRuleContext<Instruction_simple_isoleeContext>(0);
		}
		public Instruction_complexe_isoleeContext instruction_complexe_isolee() {
			return GetRuleContext<Instruction_complexe_isoleeContext>(0);
		}
		public Instruction_isoleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_isolee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_isolee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_isolee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_isolee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_isoleeContext instruction_isolee() {
		Instruction_isoleeContext _localctx = new Instruction_isoleeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_instruction_isolee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 117; instruction_simple_isolee();
				}
				break;

			case 2:
				{
				State = 118; instruction_complexe_isolee();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_integreeContext : ParserRuleContext {
		public Instruction_simple_integreeContext instruction_simple_integree() {
			return GetRuleContext<Instruction_simple_integreeContext>(0);
		}
		public Instruction_complexe_integreeContext instruction_complexe_integree() {
			return GetRuleContext<Instruction_complexe_integreeContext>(0);
		}
		public Instruction_integreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_integree; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_integree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_integree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_integree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_integreeContext instruction_integree() {
		Instruction_integreeContext _localctx = new Instruction_integreeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_instruction_integree);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 121; instruction_simple_integree();
				}
				break;

			case 2:
				{
				State = 122; instruction_complexe_integree();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_simple_baseContext : ParserRuleContext {
		public AfficherContext afficher() {
			return GetRuleContext<AfficherContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_simple_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_simple_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_simple_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_simple_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_simple_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_simple_baseContext instruction_simple_base() {
		Instruction_simple_baseContext _localctx = new Instruction_simple_baseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_instruction_simple_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 125; Match(TAB);
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 130; afficher();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_simple_isoleeContext : ParserRuleContext {
		public Instruction_simple_baseContext instruction_simple_base() {
			return GetRuleContext<Instruction_simple_baseContext>(0);
		}
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public Instruction_simple_isoleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_simple_isolee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_simple_isolee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_simple_isolee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_simple_isolee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_simple_isoleeContext instruction_simple_isolee() {
		Instruction_simple_isoleeContext _localctx = new Instruction_simple_isoleeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_instruction_simple_isolee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; instruction_simple_base();
			State = 133; Match(POINT);
			State = 134; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_simple_integreeContext : ParserRuleContext {
		public Instruction_simple_baseContext instruction_simple_base() {
			return GetRuleContext<Instruction_simple_baseContext>(0);
		}
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode VIRGULE() { return GetToken(CosmosParser.VIRGULE, 0); }
		public Instruction_simple_integreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_simple_integree; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_simple_integree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_simple_integree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_simple_integree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_simple_integreeContext instruction_simple_integree() {
		Instruction_simple_integreeContext _localctx = new Instruction_simple_integreeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_instruction_simple_integree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; instruction_simple_base();
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VIRGULE) {
				{
				State = 137; Match(VIRGULE);
				}
			}

			State = 140; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_complexe_baseContext : ParserRuleContext {
		public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_complexe_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_complexe_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_complexe_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_complexe_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_complexe_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_complexe_baseContext instruction_complexe_base() {
		Instruction_complexe_baseContext _localctx = new Instruction_complexe_baseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_instruction_complexe_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 142; Match(TAB);
				}
				}
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 147; selection();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_complexe_isoleeContext : ParserRuleContext {
		public Instruction_complexe_baseContext instruction_complexe_base() {
			return GetRuleContext<Instruction_complexe_baseContext>(0);
		}
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_complexe_isoleeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_complexe_isolee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_complexe_isolee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_complexe_isolee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_complexe_isolee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_complexe_isoleeContext instruction_complexe_isolee() {
		Instruction_complexe_isoleeContext _localctx = new Instruction_complexe_isoleeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_instruction_complexe_isolee);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; instruction_complexe_base();
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 150; Match(TAB);
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 155; Match(POINT);
			State = 156; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_complexe_integreeContext : ParserRuleContext {
		public Instruction_complexe_baseContext instruction_complexe_base() {
			return GetRuleContext<Instruction_complexe_baseContext>(0);
		}
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public ITerminalNode VIRGULE() { return GetToken(CosmosParser.VIRGULE, 0); }
		public Instruction_complexe_integreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_complexe_integree; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_complexe_integree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_complexe_integree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_complexe_integree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_complexe_integreeContext instruction_complexe_integree() {
		Instruction_complexe_integreeContext _localctx = new Instruction_complexe_integreeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_instruction_complexe_integree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; instruction_complexe_base();
			State = 160;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 159; Match(TAB);
				}
				}
				State = 162;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VIRGULE) {
				{
				State = 164; Match(VIRGULE);
				}
			}

			State = 167; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AfficherContext : ParserRuleContext {
		public ITerminalNode FONCTION_AFFICHER() { return GetToken(CosmosParser.FONCTION_AFFICHER, 0); }
		public Expression_valeurContext expression_valeur() {
			return GetRuleContext<Expression_valeurContext>(0);
		}
		public AfficherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_afficher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAfficher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAfficher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfficher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AfficherContext afficher() {
		AfficherContext _localctx = new AfficherContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_afficher);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(FONCTION_AFFICHER);
			State = 170; expression_valeur();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public ITerminalNode DEBUT_CONDITION() { return GetToken(CosmosParser.DEBUT_CONDITION, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode SUITE_CONDITION() { return GetToken(CosmosParser.SUITE_CONDITION, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public Instruction_integreeContext[] instruction_integree() {
			return GetRuleContexts<Instruction_integreeContext>();
		}
		public Instruction_integreeContext instruction_integree(int i) {
			return GetRuleContext<Instruction_integreeContext>(i);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_selection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(DEBUT_CONDITION);
			State = 173; condition();
			State = 174; Match(SUITE_CONDITION);
			State = 175; Match(RETCHAR);
			State = 177;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 176; instruction_integree();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 179;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public Expression_valeurContext left;
		public Expression_valeurContext right;
		public Operateur_comparaisonContext operateur_comparaison() {
			return GetRuleContext<Operateur_comparaisonContext>(0);
		}
		public Expression_valeurContext[] expression_valeur() {
			return GetRuleContexts<Expression_valeurContext>();
		}
		public Expression_valeurContext expression_valeur(int i) {
			return GetRuleContext<Expression_valeurContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; _localctx.left = expression_valeur();
			State = 182; operateur_comparaison();
			State = 183; _localctx.right = expression_valeur();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operateur_comparaisonContext : ParserRuleContext {
		public ITerminalNode OPERATEUR_EGAL() { return GetToken(CosmosParser.OPERATEUR_EGAL, 0); }
		public ITerminalNode OPERATEUR_DIFFERENT() { return GetToken(CosmosParser.OPERATEUR_DIFFERENT, 0); }
		public Operateur_comparaisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operateur_comparaison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterOperateur_comparaison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitOperateur_comparaison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperateur_comparaison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operateur_comparaisonContext operateur_comparaison() {
		Operateur_comparaisonContext _localctx = new Operateur_comparaisonContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_operateur_comparaison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = _input.La(1);
			if ( !(_la==OPERATEUR_EGAL || _la==OPERATEUR_DIFFERENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_valeurContext : ParserRuleContext {
		public Expression_textuelleContext expression_textuelle() {
			return GetRuleContext<Expression_textuelleContext>(0);
		}
		public Expression_numeraireContext expression_numeraire() {
			return GetRuleContext<Expression_numeraireContext>(0);
		}
		public Expression_valeurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_valeur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_valeur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_valeur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_valeur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_valeurContext expression_valeur() {
		Expression_valeurContext _localctx = new Expression_valeurContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_expression_valeur);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LE_TEXTE:
			case VALEUR_TEXTE:
				{
				State = 187; expression_textuelle();
				}
				break;
			case LE_NOMBRE:
			case VALEUR_NOMBRE:
				{
				State = 188; expression_numeraire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_textuelleContext : ParserRuleContext {
		public ITerminalNode VALEUR_TEXTE() { return GetToken(CosmosParser.VALEUR_TEXTE, 0); }
		public ITerminalNode LE_TEXTE() { return GetToken(CosmosParser.LE_TEXTE, 0); }
		public Expression_textuelleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_textuelle; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_textuelle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_textuelle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_textuelle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_textuelleContext expression_textuelle() {
		Expression_textuelleContext _localctx = new Expression_textuelleContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_expression_textuelle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_TEXTE) {
				{
				State = 191; Match(LE_TEXTE);
				}
			}

			State = 194; Match(VALEUR_TEXTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_numeraireContext : ParserRuleContext {
		public ITerminalNode VALEUR_NOMBRE() { return GetToken(CosmosParser.VALEUR_NOMBRE, 0); }
		public ITerminalNode LE_NOMBRE() { return GetToken(CosmosParser.LE_NOMBRE, 0); }
		public Expression_numeraireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_numeraire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_numeraire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_numeraire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_numeraire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_numeraireContext expression_numeraire() {
		Expression_numeraireContext _localctx = new Expression_numeraireContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_expression_numeraire);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_NOMBRE) {
				{
				State = 196; Match(LE_NOMBRE);
				}
			}

			State = 199; Match(VALEUR_NOMBRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\xCC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x6\x2\x31\n\x2\r\x2\xE\x2\x32\x3"+
		"\x2\x3\x2\x6\x2\x37\n\x2\r\x2\xE\x2\x38\x5\x2;\n\x2\x3\x2\x3\x2\x6\x2"+
		"?\n\x2\r\x2\xE\x2@\x3\x2\x6\x2\x44\n\x2\r\x2\xE\x2\x45\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4"+
		"\x5\x4V\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a`\n\a\r"+
		"\a\xE\a\x61\x3\a\x3\a\x3\a\x6\ag\n\a\r\a\xE\ah\a\ak\n\a\f\a\xE\an\v\a"+
		"\x3\b\x3\b\x6\br\n\b\r\b\xE\bs\x3\b\x3\b\x3\t\x3\t\x5\tz\n\t\x3\n\x3\n"+
		"\x5\n~\n\n\x3\v\x6\v\x81\n\v\r\v\xE\v\x82\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x5\r\x8D\n\r\x3\r\x3\r\x3\xE\x6\xE\x92\n\xE\r\xE\xE\xE\x93"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x6\xF\x9A\n\xF\r\xF\xE\xF\x9B\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x6\x10\xA3\n\x10\r\x10\xE\x10\xA4\x3\x10\x5\x10\xA8"+
		"\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x6\x12\xB4\n\x12\r\x12\xE\x12\xB5\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\xC0\n\x15\x3\x16\x5\x16\xC3\n\x16"+
		"\x3\x16\x3\x16\x3\x17\x5\x17\xC8\n\x17\x3\x17\x3\x17\x3\x17\x2\x2\x2\x18"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x3\x3\x2\x10"+
		"\x11\xCB\x2.\x3\x2\x2\x2\x4J\x3\x2\x2\x2\x6R\x3\x2\x2\x2\bW\x3\x2\x2\x2"+
		"\nZ\x3\x2\x2\x2\f]\x3\x2\x2\x2\xEo\x3\x2\x2\x2\x10y\x3\x2\x2\x2\x12}\x3"+
		"\x2\x2\x2\x14\x80\x3\x2\x2\x2\x16\x86\x3\x2\x2\x2\x18\x8A\x3\x2\x2\x2"+
		"\x1A\x91\x3\x2\x2\x2\x1C\x97\x3\x2\x2\x2\x1E\xA0\x3\x2\x2\x2 \xAB\x3\x2"+
		"\x2\x2\"\xAE\x3\x2\x2\x2$\xB7\x3\x2\x2\x2&\xBB\x3\x2\x2\x2(\xBF\x3\x2"+
		"\x2\x2*\xC2\x3\x2\x2\x2,\xC7\x3\x2\x2\x2.\x30\x5\x4\x3\x2/\x31\a\x1A\x2"+
		"\x2\x30/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3"+
		"\x2\x2\x2\x33:\x3\x2\x2\x2\x34\x36\x5\xE\b\x2\x35\x37\a\x1A\x2\x2\x36"+
		"\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2"+
		"\x2\x2\x39;\x3\x2\x2\x2:\x34\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x3\x2\x2\x2<"+
		">\a\n\x2\x2=?\a\x1A\x2\x2>=\x3\x2\x2\x2?@\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41"+
		"\x3\x2\x2\x2\x41\x43\x3\x2\x2\x2\x42\x44\x5\x10\t\x2\x43\x42\x3\x2\x2"+
		"\x2\x44\x45\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46G\x3"+
		"\x2\x2\x2GH\a\v\x2\x2HI\a\x2\x2\x3I\x3\x3\x2\x2\x2JK\x5\x6\x4\x2KL\a\x1A"+
		"\x2\x2LM\x5\b\x5\x2MN\a\x1A\x2\x2NO\x5\n\x6\x2OP\a\x1A\x2\x2PQ\x5\f\a"+
		"\x2Q\x5\x3\x2\x2\x2RS\a\x3\x2\x2SU\a\x16\x2\x2TV\a\x16\x2\x2UT\x3\x2\x2"+
		"\x2UV\x3\x2\x2\x2V\a\x3\x2\x2\x2WX\a\x4\x2\x2XY\a\x5\x2\x2Y\t\x3\x2\x2"+
		"\x2Z[\a\x6\x2\x2[\\\a\x16\x2\x2\\\v\x3\x2\x2\x2]_\a\a\x2\x2^`\a\x16\x2"+
		"\x2_^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2"+
		"\x62l\x3\x2\x2\x2\x63\x64\a\x17\x2\x2\x64\x66\a\x1A\x2\x2\x65g\a\x16\x2"+
		"\x2\x66\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i"+
		"k\x3\x2\x2\x2j\x63\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2"+
		"\x2m\r\x3\x2\x2\x2nl\x3\x2\x2\x2oq\a\t\x2\x2pr\a\x1A\x2\x2qp\x3\x2\x2"+
		"\x2rs\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uv\a\b\x2\x2"+
		"v\xF\x3\x2\x2\x2wz\x5\x16\f\x2xz\x5\x1C\xF\x2yw\x3\x2\x2\x2yx\x3\x2\x2"+
		"\x2z\x11\x3\x2\x2\x2{~\x5\x18\r\x2|~\x5\x1E\x10\x2}{\x3\x2\x2\x2}|\x3"+
		"\x2\x2\x2~\x13\x3\x2\x2\x2\x7F\x81\a\x19\x2\x2\x80\x7F\x3\x2\x2\x2\x81"+
		"\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2"+
		"\x2\x2\x84\x85\x5 \x11\x2\x85\x15\x3\x2\x2\x2\x86\x87\x5\x14\v\x2\x87"+
		"\x88\a\x18\x2\x2\x88\x89\a\x1A\x2\x2\x89\x17\x3\x2\x2\x2\x8A\x8C\x5\x14"+
		"\v\x2\x8B\x8D\a\x17\x2\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D"+
		"\x8E\x3\x2\x2\x2\x8E\x8F\a\x1A\x2\x2\x8F\x19\x3\x2\x2\x2\x90\x92\a\x19"+
		"\x2\x2\x91\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x5\"\x12\x2\x96\x1B\x3\x2"+
		"\x2\x2\x97\x99\x5\x1A\xE\x2\x98\x9A\a\x19\x2\x2\x99\x98\x3\x2\x2\x2\x9A"+
		"\x9B\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2"+
		"\x2\x2\x9D\x9E\a\x18\x2\x2\x9E\x9F\a\x1A\x2\x2\x9F\x1D\x3\x2\x2\x2\xA0"+
		"\xA2\x5\x1A\xE\x2\xA1\xA3\a\x19\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2"+
		"\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA7\x3\x2\x2\x2\xA6"+
		"\xA8\a\x17\x2\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2"+
		"\x2\x2\xA9\xAA\a\x1A\x2\x2\xAA\x1F\x3\x2\x2\x2\xAB\xAC\a\f\x2\x2\xAC\xAD"+
		"\x5(\x15\x2\xAD!\x3\x2\x2\x2\xAE\xAF\a\r\x2\x2\xAF\xB0\x5$\x13\x2\xB0"+
		"\xB1\a\xE\x2\x2\xB1\xB3\a\x1A\x2\x2\xB2\xB4\x5\x12\n\x2\xB3\xB2\x3\x2"+
		"\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6"+
		"#\x3\x2\x2\x2\xB7\xB8\x5(\x15\x2\xB8\xB9\x5&\x14\x2\xB9\xBA\x5(\x15\x2"+
		"\xBA%\x3\x2\x2\x2\xBB\xBC\t\x2\x2\x2\xBC\'\x3\x2\x2\x2\xBD\xC0\x5*\x16"+
		"\x2\xBE\xC0\x5,\x17\x2\xBF\xBD\x3\x2\x2\x2\xBF\xBE\x3\x2\x2\x2\xC0)\x3"+
		"\x2\x2\x2\xC1\xC3\a\x12\x2\x2\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2"+
		"\xC3\xC4\x3\x2\x2\x2\xC4\xC5\a\x13\x2\x2\xC5+\x3\x2\x2\x2\xC6\xC8\a\x14"+
		"\x2\x2\xC7\xC6\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9"+
		"\xCA\a\x15\x2\x2\xCA-\x3\x2\x2\x2\x18\x32\x38:@\x45U\x61hlsy}\x82\x8C"+
		"\x93\x9B\xA4\xA7\xB5\xBF\xC2\xC7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace interpreter.antlr

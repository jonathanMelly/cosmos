//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/nFo/data/etml/codespace/csharp/cosmos/src/interpreter/Cosmos.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace interpreter.antlr {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CosmosParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, LABEL_AUTEUR=5, LABEL_DATE=6, CONTENU_DATE=7, 
		ENTREPRISE_ENTETE=8, DESCRIPTION_ENTETE=9, DEBUT=10, BIBLIOTHEQUE=11, 
		FIN=12, DE_LA_TRANSMISSION=13, ALORS=14, OPERATEUR_EGAL=15, OPERATEUR_DIFFERENT=16, 
		ET=17, OU=18, OU_EXCLUSIF=19, LE_TEXTE=20, VALEUR_TEXTE=21, LE_NOMBRE=22, 
		VALEUR_NOMBRE=23, MOT=24, VIRGULE=25, POINT=26, POINT_INTERROGATION=27, 
		SUIVANT=28, DEUX_POINT=29, TAB=30, RETCHAR=31, ESPACE=32, COMMENTAIRE_LIGNE=33, 
		COMMENTAIRE=34, NOOP=35;
	public const int
		RULE_programme = 0, RULE_entete = 1, RULE_auteur = 2, RULE_date = 3, RULE_entreprise = 4, 
		RULE_description = 5, RULE_mainStart = 6, RULE_mainEnd = 7, RULE_instruction = 8, 
		RULE_instruction_simple = 9, RULE_instruction_complexe = 10, RULE_afficher = 11, 
		RULE_selection = 12, RULE_sinon_si = 13, RULE_sinon = 14, RULE_condition = 15, 
		RULE_postcondition = 16, RULE_operateur_comparaison = 17, RULE_operateur_booleen = 18, 
		RULE_expression_valeur = 19, RULE_expression_textuelle = 20, RULE_expression_numeraire = 21;
	public static readonly string[] ruleNames = {
		"programme", "entete", "auteur", "date", "entreprise", "description", 
		"mainStart", "mainEnd", "instruction", "instruction_simple", "instruction_complexe", 
		"afficher", "selection", "sinon_si", "sinon", "condition", "postcondition", 
		"operateur_comparaison", "operateur_booleen", "expression_valeur", "expression_textuelle", 
		"expression_numeraire"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Afficher'", "'Si'", "'sinon si'", "'et sinon'", "'Auteur:'", "'Date:'", 
		null, "'Entreprise:'", "'Description:'", "'Voici les ordres du programme'", 
		"'à classer dans la bibliothèque'", "'Fin'", "'de la transmission'", "'alors'", 
		null, null, "'et'", "'ou'", "'ou au contraire'", "'le texte'", null, null, 
		null, null, "','", "'.'", "'?'", "'>>'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "LABEL_AUTEUR", "LABEL_DATE", "CONTENU_DATE", 
		"ENTREPRISE_ENTETE", "DESCRIPTION_ENTETE", "DEBUT", "BIBLIOTHEQUE", "FIN", 
		"DE_LA_TRANSMISSION", "ALORS", "OPERATEUR_EGAL", "OPERATEUR_DIFFERENT", 
		"ET", "OU", "OU_EXCLUSIF", "LE_TEXTE", "VALEUR_TEXTE", "LE_NOMBRE", "VALEUR_NOMBRE", 
		"MOT", "VIRGULE", "POINT", "POINT_INTERROGATION", "SUIVANT", "DEUX_POINT", 
		"TAB", "RETCHAR", "ESPACE", "COMMENTAIRE_LIGNE", "COMMENTAIRE", "NOOP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cosmos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CosmosParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgrammeContext : ParserRuleContext {
		public EnteteContext entete() {
			return GetRuleContext<EnteteContext>(0);
		}
		public MainStartContext mainStart() {
			return GetRuleContext<MainStartContext>(0);
		}
		public MainEndContext mainEnd() {
			return GetRuleContext<MainEndContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CosmosParser.Eof, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgrammeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterProgramme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitProgramme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgrammeContext programme() {
		ProgrammeContext _localctx = new ProgrammeContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programme);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; entete();
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 45; Match(RETCHAR);
				}
				}
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 50; mainStart();
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 51; Match(RETCHAR);
				}
				}
				State = 54;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RETCHAR );
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 56; instruction();
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 61; mainEnd();
			State = 62; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnteteContext : ParserRuleContext {
		public AuteurContext auteur() {
			return GetRuleContext<AuteurContext>(0);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public EntrepriseContext entreprise() {
			return GetRuleContext<EntrepriseContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public EnteteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnteteContext entete() {
		EnteteContext _localctx = new EnteteContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_entete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; auteur();
			State = 65; Match(RETCHAR);
			State = 66; date();
			State = 67; Match(RETCHAR);
			State = 68; entreprise();
			State = 69; Match(RETCHAR);
			State = 70; description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuteurContext : ParserRuleContext {
		public ITerminalNode LABEL_AUTEUR() { return GetToken(CosmosParser.LABEL_AUTEUR, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public AuteurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auteur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAuteur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAuteur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuteur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuteurContext auteur() {
		AuteurContext _localctx = new AuteurContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_auteur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(LABEL_AUTEUR);
			State = 73; Match(MOT);
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MOT) {
				{
				State = 74; Match(MOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode LABEL_DATE() { return GetToken(CosmosParser.LABEL_DATE, 0); }
		public ITerminalNode CONTENU_DATE() { return GetToken(CosmosParser.CONTENU_DATE, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(LABEL_DATE);
			State = 78; Match(CONTENU_DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntrepriseContext : ParserRuleContext {
		public ITerminalNode ENTREPRISE_ENTETE() { return GetToken(CosmosParser.ENTREPRISE_ENTETE, 0); }
		public ITerminalNode MOT() { return GetToken(CosmosParser.MOT, 0); }
		public EntrepriseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entreprise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterEntreprise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitEntreprise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntreprise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntrepriseContext entreprise() {
		EntrepriseContext _localctx = new EntrepriseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_entreprise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(ENTREPRISE_ENTETE);
			State = 81; Match(MOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode DESCRIPTION_ENTETE() { return GetToken(CosmosParser.DESCRIPTION_ENTETE, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public ITerminalNode[] VIRGULE() { return GetTokens(CosmosParser.VIRGULE); }
		public ITerminalNode VIRGULE(int i) {
			return GetToken(CosmosParser.VIRGULE, i);
		}
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_description);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(DESCRIPTION_ENTETE);
			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 84; Match(MOT);
				}
				}
				State = 87;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==MOT );
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VIRGULE) {
				{
				{
				State = 89; Match(VIRGULE);
				State = 90; Match(RETCHAR);
				State = 92;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 91; Match(MOT);
					}
					}
					State = 94;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==MOT );
				}
				}
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainStartContext : ParserRuleContext {
		public IToken nomDuProgramme;
		public IToken bibliotheque;
		public ITerminalNode DEBUT() { return GetToken(CosmosParser.DEBUT, 0); }
		public ITerminalNode DEUX_POINT() { return GetToken(CosmosParser.DEUX_POINT, 0); }
		public ITerminalNode[] MOT() { return GetTokens(CosmosParser.MOT); }
		public ITerminalNode MOT(int i) {
			return GetToken(CosmosParser.MOT, i);
		}
		public ITerminalNode BIBLIOTHEQUE() { return GetToken(CosmosParser.BIBLIOTHEQUE, 0); }
		public MainStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainStart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterMainStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitMainStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainStartContext mainStart() {
		MainStartContext _localctx = new MainStartContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_mainStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(DEBUT);
			State = 102; _localctx.nomDuProgramme = Match(MOT);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BIBLIOTHEQUE) {
				{
				State = 103; Match(BIBLIOTHEQUE);
				State = 104; _localctx.bibliotheque = Match(MOT);
				}
			}

			State = 107; Match(DEUX_POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainEndContext : ParserRuleContext {
		public ITerminalNode FIN() { return GetToken(CosmosParser.FIN, 0); }
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode DE_LA_TRANSMISSION() { return GetToken(CosmosParser.DE_LA_TRANSMISSION, 0); }
		public MainEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterMainEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitMainEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainEndContext mainEnd() {
		MainEndContext _localctx = new MainEndContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_mainEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(FIN);
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DE_LA_TRANSMISSION) {
				{
				State = 110; Match(DE_LA_TRANSMISSION);
				}
			}

			State = 113; Match(POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public Instruction_simpleContext instruction_simple() {
			return GetRuleContext<Instruction_simpleContext>(0);
		}
		public Instruction_complexeContext instruction_complexe() {
			return GetRuleContext<Instruction_complexeContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 115; instruction_simple();
				}
				break;

			case 2:
				{
				State = 116; instruction_complexe();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_simpleContext : ParserRuleContext {
		public ITerminalNode POINT() { return GetToken(CosmosParser.POINT, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public AfficherContext afficher() {
			return GetRuleContext<AfficherContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_simple; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_simple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_simple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_simpleContext instruction_simple() {
		Instruction_simpleContext _localctx = new Instruction_simpleContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_instruction_simple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 119; Match(TAB);
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 124; afficher();
			}
			State = 125; Match(POINT);
			State = 126; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_complexeContext : ParserRuleContext {
		public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public Instruction_complexeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_complexe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterInstruction_complexe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitInstruction_complexe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction_complexe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_complexeContext instruction_complexe() {
		Instruction_complexeContext _localctx = new Instruction_complexeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_instruction_complexe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 128; Match(TAB);
				}
				}
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			{
			State = 133; selection();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AfficherContext : ParserRuleContext {
		public Expression_valeurContext expression_valeur() {
			return GetRuleContext<Expression_valeurContext>(0);
		}
		public AfficherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_afficher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterAfficher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitAfficher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfficher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AfficherContext afficher() {
		AfficherContext _localctx = new AfficherContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_afficher);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(T__0);
			State = 136; expression_valeur();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public ConditionContext si;
		public ITerminalNode ALORS() { return GetToken(CosmosParser.ALORS, 0); }
		public ITerminalNode[] RETCHAR() { return GetTokens(CosmosParser.RETCHAR); }
		public ITerminalNode RETCHAR(int i) {
			return GetToken(CosmosParser.RETCHAR, i);
		}
		public ITerminalNode POINT_INTERROGATION() { return GetToken(CosmosParser.POINT_INTERROGATION, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Sinon_siContext[] sinon_si() {
			return GetRuleContexts<Sinon_siContext>();
		}
		public Sinon_siContext sinon_si(int i) {
			return GetRuleContext<Sinon_siContext>(i);
		}
		public SinonContext sinon() {
			return GetRuleContext<SinonContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_selection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__1);
			State = 139; _localctx.si = condition();
			State = 140; Match(ALORS);
			State = 141; Match(RETCHAR);
			State = 143;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 142; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 145;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 150;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 147; sinon_si();
					}
					} 
				}
				State = 152;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 153; sinon();
				}
				break;
			}
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 156; Match(TAB);
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 161; Match(POINT_INTERROGATION);
			State = 162; Match(RETCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sinon_siContext : ParserRuleContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode ALORS() { return GetToken(CosmosParser.ALORS, 0); }
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Sinon_siContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinon_si; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSinon_si(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSinon_si(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinon_si(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sinon_siContext sinon_si() {
		Sinon_siContext _localctx = new Sinon_siContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_sinon_si);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 164; Match(TAB);
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 169; Match(T__2);
			State = 170; condition();
			State = 171; Match(ALORS);
			State = 172; Match(RETCHAR);
			State = 174;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 173; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinonContext : ParserRuleContext {
		public ITerminalNode RETCHAR() { return GetToken(CosmosParser.RETCHAR, 0); }
		public ITerminalNode[] TAB() { return GetTokens(CosmosParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(CosmosParser.TAB, i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public SinonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterSinon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitSinon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinonContext sinon() {
		SinonContext _localctx = new SinonContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_sinon);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 178; Match(TAB);
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAB );
			State = 183; Match(T__3);
			State = 184; Match(RETCHAR);
			State = 186;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 185; instruction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 188;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public Expression_valeurContext left;
		public Expression_valeurContext right;
		public Operateur_comparaisonContext operateur_comparaison() {
			return GetRuleContext<Operateur_comparaisonContext>(0);
		}
		public Expression_valeurContext[] expression_valeur() {
			return GetRuleContexts<Expression_valeurContext>();
		}
		public Expression_valeurContext expression_valeur(int i) {
			return GetRuleContext<Expression_valeurContext>(i);
		}
		public PostconditionContext[] postcondition() {
			return GetRuleContexts<PostconditionContext>();
		}
		public PostconditionContext postcondition(int i) {
			return GetRuleContext<PostconditionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; _localctx.left = expression_valeur();
			State = 191; operateur_comparaison();
			State = 192; _localctx.right = expression_valeur();
			State = 196;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 193; postcondition();
					}
					} 
				}
				State = 198;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostconditionContext : ParserRuleContext {
		public Operateur_booleenContext operateur_booleen() {
			return GetRuleContext<Operateur_booleenContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public PostconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostconditionContext postcondition() {
		PostconditionContext _localctx = new PostconditionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_postcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; operateur_booleen();
			State = 200; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operateur_comparaisonContext : ParserRuleContext {
		public ITerminalNode OPERATEUR_EGAL() { return GetToken(CosmosParser.OPERATEUR_EGAL, 0); }
		public ITerminalNode OPERATEUR_DIFFERENT() { return GetToken(CosmosParser.OPERATEUR_DIFFERENT, 0); }
		public Operateur_comparaisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operateur_comparaison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterOperateur_comparaison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitOperateur_comparaison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperateur_comparaison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operateur_comparaisonContext operateur_comparaison() {
		Operateur_comparaisonContext _localctx = new Operateur_comparaisonContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_operateur_comparaison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = _input.La(1);
			if ( !(_la==OPERATEUR_EGAL || _la==OPERATEUR_DIFFERENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operateur_booleenContext : ParserRuleContext {
		public ITerminalNode ET() { return GetToken(CosmosParser.ET, 0); }
		public ITerminalNode OU() { return GetToken(CosmosParser.OU, 0); }
		public ITerminalNode OU_EXCLUSIF() { return GetToken(CosmosParser.OU_EXCLUSIF, 0); }
		public Operateur_booleenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operateur_booleen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterOperateur_booleen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitOperateur_booleen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperateur_booleen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operateur_booleenContext operateur_booleen() {
		Operateur_booleenContext _localctx = new Operateur_booleenContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_operateur_booleen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ET) | (1L << OU) | (1L << OU_EXCLUSIF))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_valeurContext : ParserRuleContext {
		public Expression_textuelleContext expression_textuelle() {
			return GetRuleContext<Expression_textuelleContext>(0);
		}
		public Expression_numeraireContext expression_numeraire() {
			return GetRuleContext<Expression_numeraireContext>(0);
		}
		public Expression_valeurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_valeur; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_valeur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_valeur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_valeur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_valeurContext expression_valeur() {
		Expression_valeurContext _localctx = new Expression_valeurContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_expression_valeur);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LE_TEXTE:
			case VALEUR_TEXTE:
				{
				State = 206; expression_textuelle();
				}
				break;
			case LE_NOMBRE:
			case VALEUR_NOMBRE:
				{
				State = 207; expression_numeraire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_textuelleContext : ParserRuleContext {
		public ITerminalNode VALEUR_TEXTE() { return GetToken(CosmosParser.VALEUR_TEXTE, 0); }
		public ITerminalNode LE_TEXTE() { return GetToken(CosmosParser.LE_TEXTE, 0); }
		public Expression_textuelleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_textuelle; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_textuelle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_textuelle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_textuelle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_textuelleContext expression_textuelle() {
		Expression_textuelleContext _localctx = new Expression_textuelleContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_expression_textuelle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_TEXTE) {
				{
				State = 210; Match(LE_TEXTE);
				}
			}

			State = 213; Match(VALEUR_TEXTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_numeraireContext : ParserRuleContext {
		public ITerminalNode VALEUR_NOMBRE() { return GetToken(CosmosParser.VALEUR_NOMBRE, 0); }
		public ITerminalNode LE_NOMBRE() { return GetToken(CosmosParser.LE_NOMBRE, 0); }
		public Expression_numeraireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_numeraire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.EnterExpression_numeraire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICosmosListener typedListener = listener as ICosmosListener;
			if (typedListener != null) typedListener.ExitExpression_numeraire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICosmosVisitor<TResult> typedVisitor = visitor as ICosmosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_numeraire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_numeraireContext expression_numeraire() {
		Expression_numeraireContext _localctx = new Expression_numeraireContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_expression_numeraire);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LE_NOMBRE) {
				{
				State = 215; Match(LE_NOMBRE);
				}
			}

			State = 218; Match(VALEUR_NOMBRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3%\xDF\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x6\x2\x31\n\x2\r\x2\xE\x2\x32\x3"+
		"\x2\x3\x2\x6\x2\x37\n\x2\r\x2\xE\x2\x38\x3\x2\x6\x2<\n\x2\r\x2\xE\x2="+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x5\x4N\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x6\aX\n\a\r\a\xE\aY\x3\a\x3\a\x3\a\x6\a_\n\a\r\a\xE\a`\a\a\x63\n\a"+
		"\f\a\xE\a\x66\v\a\x3\b\x3\b\x3\b\x3\b\x5\bl\n\b\x3\b\x3\b\x3\t\x3\t\x5"+
		"\tr\n\t\x3\t\x3\t\x3\n\x3\n\x5\nx\n\n\x3\v\x6\v{\n\v\r\v\xE\v|\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x6\f\x84\n\f\r\f\xE\f\x85\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x6\xE\x92\n\xE\r\xE\xE\xE\x93\x3\xE\a\xE\x97"+
		"\n\xE\f\xE\xE\xE\x9A\v\xE\x3\xE\x5\xE\x9D\n\xE\x3\xE\x6\xE\xA0\n\xE\r"+
		"\xE\xE\xE\xA1\x3\xE\x3\xE\x3\xE\x3\xF\x6\xF\xA8\n\xF\r\xF\xE\xF\xA9\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x6\xF\xB1\n\xF\r\xF\xE\xF\xB2\x3\x10\x6\x10"+
		"\xB6\n\x10\r\x10\xE\x10\xB7\x3\x10\x3\x10\x3\x10\x6\x10\xBD\n\x10\r\x10"+
		"\xE\x10\xBE\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xC5\n\x11\f\x11\xE\x11\xC8"+
		"\v\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x5\x15\xD3\n\x15\x3\x16\x5\x16\xD6\n\x16\x3\x16\x3\x16\x3\x17\x5\x17"+
		"\xDB\n\x17\x3\x17\x3\x17\x3\x17\x2\x2\x2\x18\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x4\x3\x2\x11\x12\x3\x2\x13\x15\xE0\x2"+
		".\x3\x2\x2\x2\x4\x42\x3\x2\x2\x2\x6J\x3\x2\x2\x2\bO\x3\x2\x2\x2\nR\x3"+
		"\x2\x2\x2\fU\x3\x2\x2\x2\xEg\x3\x2\x2\x2\x10o\x3\x2\x2\x2\x12w\x3\x2\x2"+
		"\x2\x14z\x3\x2\x2\x2\x16\x83\x3\x2\x2\x2\x18\x89\x3\x2\x2\x2\x1A\x8C\x3"+
		"\x2\x2\x2\x1C\xA7\x3\x2\x2\x2\x1E\xB5\x3\x2\x2\x2 \xC0\x3\x2\x2\x2\"\xC9"+
		"\x3\x2\x2\x2$\xCC\x3\x2\x2\x2&\xCE\x3\x2\x2\x2(\xD2\x3\x2\x2\x2*\xD5\x3"+
		"\x2\x2\x2,\xDA\x3\x2\x2\x2.\x30\x5\x4\x3\x2/\x31\a!\x2\x2\x30/\x3\x2\x2"+
		"\x2\x31\x32\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34"+
		"\x3\x2\x2\x2\x34\x36\x5\xE\b\x2\x35\x37\a!\x2\x2\x36\x35\x3\x2\x2\x2\x37"+
		"\x38\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39;\x3\x2\x2"+
		"\x2:<\x5\x12\n\x2;:\x3\x2\x2\x2<=\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2"+
		"\x2>?\x3\x2\x2\x2?@\x5\x10\t\x2@\x41\a\x2\x2\x3\x41\x3\x3\x2\x2\x2\x42"+
		"\x43\x5\x6\x4\x2\x43\x44\a!\x2\x2\x44\x45\x5\b\x5\x2\x45\x46\a!\x2\x2"+
		"\x46G\x5\n\x6\x2GH\a!\x2\x2HI\x5\f\a\x2I\x5\x3\x2\x2\x2JK\a\a\x2\x2KM"+
		"\a\x1A\x2\x2LN\a\x1A\x2\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2N\a\x3\x2\x2\x2"+
		"OP\a\b\x2\x2PQ\a\t\x2\x2Q\t\x3\x2\x2\x2RS\a\n\x2\x2ST\a\x1A\x2\x2T\v\x3"+
		"\x2\x2\x2UW\a\v\x2\x2VX\a\x1A\x2\x2WV\x3\x2\x2\x2XY\x3\x2\x2\x2YW\x3\x2"+
		"\x2\x2YZ\x3\x2\x2\x2Z\x64\x3\x2\x2\x2[\\\a\x1B\x2\x2\\^\a!\x2\x2]_\a\x1A"+
		"\x2\x2^]\x3\x2\x2\x2_`\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61"+
		"\x63\x3\x2\x2\x2\x62[\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2"+
		"\x2\x64\x65\x3\x2\x2\x2\x65\r\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\a\f\x2"+
		"\x2hk\a\x1A\x2\x2ij\a\r\x2\x2jl\a\x1A\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2"+
		"lm\x3\x2\x2\x2mn\a\x1F\x2\x2n\xF\x3\x2\x2\x2oq\a\xE\x2\x2pr\a\xF\x2\x2"+
		"qp\x3\x2\x2\x2qr\x3\x2\x2\x2rs\x3\x2\x2\x2st\a\x1C\x2\x2t\x11\x3\x2\x2"+
		"\x2ux\x5\x14\v\x2vx\x5\x16\f\x2wu\x3\x2\x2\x2wv\x3\x2\x2\x2x\x13\x3\x2"+
		"\x2\x2y{\a \x2\x2zy\x3\x2\x2\x2{|\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2"+
		"\x2}~\x3\x2\x2\x2~\x7F\x5\x18\r\x2\x7F\x80\a\x1C\x2\x2\x80\x81\a!\x2\x2"+
		"\x81\x15\x3\x2\x2\x2\x82\x84\a \x2\x2\x83\x82\x3\x2\x2\x2\x84\x85\x3\x2"+
		"\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87"+
		"\x88\x5\x1A\xE\x2\x88\x17\x3\x2\x2\x2\x89\x8A\a\x3\x2\x2\x8A\x8B\x5(\x15"+
		"\x2\x8B\x19\x3\x2\x2\x2\x8C\x8D\a\x4\x2\x2\x8D\x8E\x5 \x11\x2\x8E\x8F"+
		"\a\x10\x2\x2\x8F\x91\a!\x2\x2\x90\x92\x5\x12\n\x2\x91\x90\x3\x2\x2\x2"+
		"\x92\x93\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x98\x3"+
		"\x2\x2\x2\x95\x97\x5\x1C\xF\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2"+
		"\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98\x3"+
		"\x2\x2\x2\x9B\x9D\x5\x1E\x10\x2\x9C\x9B\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2"+
		"\x9D\x9F\x3\x2\x2\x2\x9E\xA0\a \x2\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2"+
		"\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3"+
		"\xA4\a\x1D\x2\x2\xA4\xA5\a!\x2\x2\xA5\x1B\x3\x2\x2\x2\xA6\xA8\a \x2\x2"+
		"\xA7\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3"+
		"\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\a\x5\x2\x2\xAC\xAD\x5 \x11\x2\xAD"+
		"\xAE\a\x10\x2\x2\xAE\xB0\a!\x2\x2\xAF\xB1\x5\x12\n\x2\xB0\xAF\x3\x2\x2"+
		"\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\x1D"+
		"\x3\x2\x2\x2\xB4\xB6\a \x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2"+
		"\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a"+
		"\x6\x2\x2\xBA\xBC\a!\x2\x2\xBB\xBD\x5\x12\n\x2\xBC\xBB\x3\x2\x2\x2\xBD"+
		"\xBE\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\x1F\x3\x2"+
		"\x2\x2\xC0\xC1\x5(\x15\x2\xC1\xC2\x5$\x13\x2\xC2\xC6\x5(\x15\x2\xC3\xC5"+
		"\x5\"\x12\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2"+
		"\x2\xC6\xC7\x3\x2\x2\x2\xC7!\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCA\x5"+
		"&\x14\x2\xCA\xCB\x5 \x11\x2\xCB#\x3\x2\x2\x2\xCC\xCD\t\x2\x2\x2\xCD%\x3"+
		"\x2\x2\x2\xCE\xCF\t\x3\x2\x2\xCF\'\x3\x2\x2\x2\xD0\xD3\x5*\x16\x2\xD1"+
		"\xD3\x5,\x17\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD1\x3\x2\x2\x2\xD3)\x3\x2\x2"+
		"\x2\xD4\xD6\a\x16\x2\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7"+
		"\x3\x2\x2\x2\xD7\xD8\a\x17\x2\x2\xD8+\x3\x2\x2\x2\xD9\xDB\a\x18\x2\x2"+
		"\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\a"+
		"\x19\x2\x2\xDD-\x3\x2\x2\x2\x1A\x32\x38=MY`\x64kqw|\x85\x93\x98\x9C\xA1"+
		"\xA9\xB2\xB7\xBE\xC6\xD2\xD5\xDA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace interpreter.antlr

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(solution_file)'

- task: DotNetCoreCLI@2
  displayName: 'Unit Tests: run'
  inputs:
    command: 'test'
    projects: '$(test_project)'
    arguments: '--collect:"Xplat Code Coverage"'
    publishTestResults: false
    testRunTitle: 'All tests'

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path $(tool_path)
    $(tool_path)/reportgenerator -classfilters:"-interpreter.antlr.*" -reports:"$(coverage_summary_file)" -targetdir:"$(coverage_report_folder)" -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges"
  failOnStderr: false
  continueOnError: true
  displayName: 'Unit Tests: generate coverage'

#disable.coverage.autogenerate:true in variables to keep previous report supporting filters
- task: PublishCodeCoverageResults@1
  displayName: 'Unit Tests: publish coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(coverage_report_folder)Cobertura.xml'
    reportDirectory: '$(coverage_report_folder)'
    failIfCoverageEmpty: false


#Integration test (retcode indicates if failed)
- script: |
      echo Starting integration test
      dotnet run -r win-x64 --project src/interpreter/interpreter.csproj src/test/data/ValidProgram.cosmos
      echo End of integration test
  #workingDirectory: #
  displayName: 'Integration tests: run'
  failOnStderr: true



